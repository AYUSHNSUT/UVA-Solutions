/*
  BFS Complicates the problem, just store the coordinates of all 1 elements and 3 elements.
  Do a brute force computing minimum distance of individual 1s from 3s and then find the maximum of all those sums
*/


#include<bits/stdc++.h>

using namespace std;

#define DEBUG(x) cout << '>' << #x << ':' << x << endl;
#define REP(i, n) for (int i = 0; i < (n); i++)
  #define FOR(i, a, b) for (int i = (a); i <= (b); i++)
    #define FORD(i, a, b) for (int i = (a); i >= (b); i--)
      #define all(c) c.begin(), c.end()

#define M 1000000007


typedef long long ll;
typedef unsigned long long ull;
typedef pair < int, int > pii;
typedef pair < ll, ll > pll;
typedef pair < string, string > pss;
typedef vector < int > vi;
typedef vector < vi > vvi;
typedef vector < pii > vii;
typedef vector < ll > vl;
typedef vector < vl > vvl;

#define mp make_pair
#define pb push_back

inline bool EQ(double a, double b) {
  return fabs(a - b) < 1e-9;
}
const int INF = 1 << 29;
inline int two(int n) {
  return 1 << n;
}
inline int test(int n, int b) {
  return (n >> b) & 1;
}
inline void set_bit(int & n, int b) {
  n |= two(b);
}
inline void unset_bit(int & n, int b) {
  n &= ~two(b);
}
inline int last_bit(int n) {
  return n & (-n);
}
inline int ones(int n) {
  int res = 0;
  while (n && ++res) n -= n & (-n);
  return res;
}
template < class T > void chmax(T & a,
  const T & b) {
  a = max(a, b);
}
template < class T > void chmin(T & a,
  const T & b) {
  a = min(a, b);
}
/////////////////////////////////////////////////////////////////////
int main() {
  //ofstream fout;
  // ifstream fin;
  //	fout.open("OUTPUT.txt",ios::out);
  //	fin.open("INPUT.txt",ios::in);
  //  FILE *fptr = fopen("sample.txt", "w");
  std::ios::sync_with_stdio(false);
  cin.tie(0);


  int m;
  while (scanf("%d", &m)!=EOF) {
   // vvi a(m, vi(m));
    vector < pii > xy3holder;
    vector < pii > xy1holder;
    char c;
    REP(i, m) {
      REP(j, m) {
        cin >> c;
   //     DEBUG(c);
        if (c=='3') {
          xy3holder.pb(pii(i,j));
        }

        if (c=='1')
        {
          xy1holder.pb(pii(i,j));
        }
      }
    }



    int maxdistance =  - (1e9);
    for (auto z = xy1holder.begin();z!=xy1holder.end();z++) {
      int mindistance = 1e9;
      for (auto l = xy3holder.begin();l!=xy3holder.end();l++) {
        int tempdist = abs(l->first - z->first) + abs(l->second - z->second);
        if (tempdist < mindistance)
          mindistance = tempdist;
      }

      if (mindistance > maxdistance)
        maxdistance = mindistance;
    }

    printf("%d\n",maxdistance);
  }



  //  fclose(fptr);
  return 0;
}
/*
4
1223
2123
2213
3212
2
12
33
*/
