/*
    Good problem, complete mess of solution;
    For <=5 non empty areas, print all those areas along with the rest of the null areas so that the total solutiosn = 5;
    
    for the rest, do a bruteforce search using 6 loops

*/


#include<bits/stdc++.h>

using namespace std;

#define DEBUG(x) cout << '>' << #x << ':' << x << endl;
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)
#define all(c) c.begin(),c.end()

#define M 1000000007


typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<string, string> pss;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pii> vii;
typedef vector<ll> vl;
typedef vector<vl> vvl;

#define mp make_pair
#define pb push_back

inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }
const int INF = 1<<29;
inline int two(int n) { return 1 << n; }
inline int test(int n, int b) { return (n>>b)&1; }
inline void set_bit(int & n, int b) { n |= two(b); }
inline void unset_bit(int & n, int b) { n &= ~two(b); }
inline int last_bit(int n) { return n & (-n); }
inline int ones(int n) { int res = 0; while(n && ++res) n-=n&(-n); return res; }
template<class T> void chmax(T & a, const T & b) { a = max(a, b); }
template<class T> void chmin(T & a, const T & b) { a = min(a, b); }
/////////////////////////////////////////////////////////////////////


int dis(int elem1,int elem2)
{
    int x1 = elem1/5;
    int x2 = elem2/5;
    int y1 = elem1%5;
    int y2 = elem2%5;

    return abs(x1-x2) + abs(y1-y2);
}



int main()
{
    //ofstream fout;
    // ifstream fin;
//	fout.open("OUTPUT.txt",ios::out);
//	fin.open("INPUT.txt",ios::in);
    std::ios::sync_with_stdio(false);
//fout.close();


    int t;
    cin >> t;
    while(t--)
    {
        vvi a(5,vi(5));
        int nonMT;
        cin >> nonMT;
        map <int,set<int>> b;
        set <int> ans;

        int z = 0;
        int cpy = nonMT;
        while(nonMT--)
        {
            int i , j;
            cin >> i >> j;
            cin >> a[i][j];
            b[a[i][j]].insert(i*5+j);
        }

        if(cpy<=5)
        {

           for(auto it = b.begin();it!=b.end();it++)
           {
               for(auto x : (it->second))
                    ans.insert(x);
           }

            for(int i = 0;i<5&&ans.size()!=5;i++)
            {
                for(int j = 0;j<5&&ans.size()!=5;j++)
                {
                    if(a[i][j]==0)
                        ans.insert(i*5+j);
                }
            }


        }


        else
        {
            vi vp;
              for(auto it = b.rbegin();it!=b.rend();it++)
           {
               for(auto x : (it->second))
                    vp.pb(x);
           }

         sort(all(vp));


         int minSum = INT_MAX;
         for(int i = 0;i<cpy-4;i++)
         {
             for(int j = i+1;j<cpy-3;j++)
             {
                 for(int k = j+1;k<cpy-2;k++)
                {
                    for(int l = k+1;l<cpy-1;l++)
                    {
                                for(int m = l+1;m<cpy;m++)
                                {

                                       int currTotal = 0;
                                        for(auto x: vp)
                                        {
                                            int curr = INT_MAX;
                                            int disax = dis(x,vp[i])*a[x/5][x%5];
                                             int disbx = dis(x,vp[j])*a[x/5][x%5];
                                              int discx = dis(x,vp[k])*a[x/5][x%5];
                                               int disdx = dis(x,vp[l])*a[x/5][x%5];
                                                int disex = dis(x,vp[m])*a[x/5][x%5];
                                            curr = min(curr,disax);
                                            curr = min(curr,disbx);
                                            curr = min(curr,discx);
                                            curr = min(curr,disdx);
                                            curr = min(curr,disex);

                                            currTotal += curr;

                                        }


                                        if(currTotal < minSum)
                                        {
//                                            DEBUG(vp[i]);
//                                            DEBUG(vp[j]);
//                                            DEBUG(vp[k]);
//                                            DEBUG(vp[l]);
//                                           DEBUG(vp[m]);
//
//                                           DEBUG(currTotal);
//                                           DEBUG(minSum);

                                            ans.clear();
                                            ans.insert(vp[i]);
                                             ans.insert(vp[j]);
                                              ans.insert(vp[k]);
                                               ans.insert(vp[l]);
                                                ans.insert(vp[m]);
                                            minSum = currTotal;
                                        }

                                }
                    }

                }
             }
         }
        }


        int ctr = 0;
        for(auto x: ans)
        {
            cout << x;
            ctr++;
            if(ctr!=5)
                cout << " ";
        }
        cout << endl;

    }
    return 0;
}

/*
4
1
2 2 1
4
0 0 1
4 4 1
0 4 1
4 0 1
5
0 0 1
1 1 1
2 2 1
3 3 1
4 4 1
7
4 2 2
3 3 1
2 4 3
2 1 1
1 3 4
1 2 2
1 0 1
*/
